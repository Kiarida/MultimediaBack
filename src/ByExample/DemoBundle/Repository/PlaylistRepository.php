<?php

namespace ByExample\DemoBundle\Repository;

use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\EntityRepository;
use ByExample\DemoBundle\Entity\Tag;
/**
 * NoteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlaylistRepository extends EntityRepository{

	public function findPlaylistById($id, $id_playlist){
		$query=$this->_em->createQuery('SELECT p
	    FROM ByExampleDemoBundle:Playlist p
	    WHERE p.id LIKE :idplaylist 
	    AND p.idutilisateur = :idutil')
	    ->setParameter("idplaylist",$id_playlist)->setParameter("idutil",$id);
	    $playlists=$query->getResult();
	    return $playlists;
	}

	/*public function findPlaylistById($id, $id_playlist){
		$rsm = new ResultSetMapping($em);
	    $rsm->addScalarResult('idItem', 'idItem');
	    $rsm->addScalarResult('id', 'id');
	    $rsm->addScalarResult('nom', 'nom');
	    $rsm->addScalarResult('dateCreation', 'datecreation');
	    $q = $this->_em->createNativeQuery(
	        'SELECT p.*, idItem FROM playlist p, itemplaylist WHERE p.id = ? AND p.idutilisateur = ?',
	        $rsm
	    )->setParameter(1, $id_playlist)->setParameter(2, $id);
	    $playlists = $q->getResult();
	    return $playlists;
	}*/

	public function findTagByIdPlay($id, $id_playlist){
		$query = $this->_em->createQuery(
        'SELECT t FROM ByExampleDemoBundle:Tag t JOIN t.idplaylist g WHERE g.id= :id AND g.idutilisateur = :idutil')
        ->setParameter('id', $id_playlist)->setParameter("idutil", $id);
        $tags=$query->getResult();
        return $tags;
	}

	public function findTagById($idTag, $id){
		$query=$this->_em->createQuery('SELECT t.id
      	FROM ByExampleDemoBundle:Tag t
      	JOIN t.idplaylist p
      	WHERE t.id = :idtag 
      	AND p.idutilisateur = :idutil')
        ->setParameter("idtag",$idTag)->setParameter("idutil",$id);
        $tags=$query->getResult();
        return $tags;
	}

	public function findTagByLibelle($libelle, $id){
		$query = $this->_em->createQuery(
	    'SELECT t.id
	    FROM ByExampleDemoBundle:Tag t
	    JOIN t.idplaylist p
	    WHERE t.libelle LIKE :libelle 
	    AND p.idutilisateur = :idutil'
	  	)->setParameter('libelle', $libelle)->setParameter('idutil',$id);
	  	$tags = $query->getResult();
	  	return $tags;
	}

	public function findPlaylistByTag($tags, $id_playlist){
		$query=$this->_em->createQuery('SELECT p.id FROM ByExampleDemoBundle:Playlist p JOIN p.idtag t WHERE p.id =:playlist AND t.id = :tag')->setParameter("playlist",$id_playlist)->setParameter("tag",$tags[0]["id"]);
        $tagplaylist=$query->getResult();
        return $tagplaylist;
	}

	public function insertPlaylistTag($tags, $id_playlist){
		$conn = $this->_em->getConnection();
        $tag = $conn->insert("tagplaylist", array("idTag"=>$tags[0]["id"], "idPlaylist"=>$id_playlist));
        return $tag;
	}

	public function insertTag($libelle, $id_playlist){
		$newTag = new Tag();
        $newTag->setLibelle($libelle);
        $this->_em->persist($newTag);
        $this->_em->flush();
        $idTag = $newTag->getId();
        $conn = $this->_em->getConnection();
        $conn->insert("tagplaylist", array("idTag"=>$idTag, "idPlaylist"=>$id_playlist));
        return $newTag;
	}
}