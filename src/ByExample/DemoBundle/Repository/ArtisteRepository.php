<?php

namespace ByExample\DemoBundle\Repository;

use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

/**
 * ArtisteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArtisteRepository extends EntityRepository
{
    public function findArtistesBySearchKey($key)
    {
        $key = "%".$key."%";
        $query = $this->_em->createQuery(
        'SELECT p.id, p.nom, p.urlCover
        FROM ByExampleDemoBundle:Artiste p
        WHERE p.nom LIKE :nom')
        ->setParameter('nom', $key);
        $artistes = $query->getResult(Query::HYDRATE_OBJECT);

        return $artistes;
    }

    public function findArtist($idartiste){
        $rsm = new ResultSetMapping($em);
        $rsm->addEntityResult('ByExampleDemoBundle:Artiste','p');
        $rsm->addScalarResult('id','id');
        $rsm->addScalarResult('nom','nom');
        $rsm->addScalarResult('note','note');
        $rsm->addScalarResult('urlCover', 'urlCover');
        $query=$this->_em->createNativeQuery('SELECT p.* FROM artiste p WHERE p.id = :idartiste', $rsm)->setParameter("idartiste",$idartiste);
        $artist=$query->getResult(Query::HYDRATE_OBJECT);
        return $artist;
    }



     public function findArtistes($limit)
    {

        $rsm = new ResultSetMapping($em);
        $rsm->addEntityResult('ByExampleDemoBundle:Artiste','a');
        $rsm->addScalarResult('id','id');
        $rsm->addScalarResult('nom','nom');
        $rsm->addScalarResult('note','note');
        $rsm->addScalarResult('urlCover', 'urlCover');

        $this->_em->flush();
        $this->_em->clear();

        $query = $this->_em->createNativeQuery('SELECT a.* FROM artiste a
         ORDER BY RAND() LIMIT ?', $rsm);
        $query->setParameter(1, $limit);

        $artistes = $query->getResult();
        return $artistes;
    }
}
