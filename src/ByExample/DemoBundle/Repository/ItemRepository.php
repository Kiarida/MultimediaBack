<?php

namespace ByExample\DemoBundle\Repository;

use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

/**
 * ItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemRepository extends EntityRepository
{
	public function findItemsBySearchKey($key)
	{
        $key = "%".$key."%";

		$query = $this->_em->createQuery('SELECT partial i.{id,url,titre,note,duree,typeitem,nbvues,date,urlCover,urlPoster}, partial a.{id,nom}
                                            FROM ByExampleDemoBundle:Item i LEFT JOIN i.idartiste a
                                            WHERE i.titre LIKE :key')
        ->setParameter('key', $key);
        $items = $query->getResult(Query::HYDRATE_ARRAY);
        return $items;
	}

    public function findItemsByPopularity($days, $limit)
    {

        $query = $this->_em->createQuery(
        'SELECT COUNT(i.id) as views, i.id, i.titre 
        FROM ByExampleDemoBundle:Item i, ByExampleDemoBundle:Ecoute e
        WHERE e.iditem = i.id
        AND (e.date > :before)
        GROUP BY i.id
        ORDER BY views DESC')
        ->setParameter('before', new \DateTime('-'.$days.' days'))
        ->setMaxResults($limit);
        $items = $query->getResult();
        return $items;
    }

    public function findTagsByItem($idItem)
    {

        $query = $this->_em->createQuery(
        'SELECT t.libelle, nt.note
        FROM ByExampleDemoBundle:Tag t, ByExampleDemoBundle:NoteTagItem nt
        WHERE t.id = nt.idtag
        AND nt.iditem= :idItem')
        ->setParameter('idItem', $idItem);
        $items = $query->getResult();
        return $items;
    }

    public function findRandomItemByGenre($idGenre)
    {

        $rsm = new ResultSetMapping($em);
        $rsm->addEntityResult('ByExampleDemoBundle:Item','i');
        $rsm->addScalarResult('id','id');
        $rsm->addScalarResult('url','url');
        $rsm->addScalarResult('titre','titre');
        $rsm->addScalarResult('note','note');
        $rsm->addScalarResult('duree','duree');
        $rsm->addScalarResult('typeItem','typeItem');
        $rsm->addScalarResult('nbVues','nbVues');
        $rsm->addScalarResult('date','date');

        $rsm->addScalarResult('idArtiste','idArtiste');

        $this->_em->flush();
        $this->_em->clear();

        $query = $this->_em->createNativeQuery('SELECT i.*, idArtiste FROM item i, itemgenre ig, itemartiste ia
        WHERE i.id = ig.idItem AND i.id = ia.idItem 
        AND ig.idGenre = ? ORDER BY RAND() LIMIT 1', $rsm);
        $query->setParameter(1, $idGenre);

        $item = $query->getResult();
        return $item;
    }

    public function findRandomItemByArtiste($idArtiste)
    {

        $rsm = new ResultSetMapping($em);
        $rsm->addEntityResult('ByExampleDemoBundle:Item','i');
        $rsm->addScalarResult('id','id');
        $rsm->addScalarResult('url','url');
        $rsm->addScalarResult('titre','titre');
        $rsm->addScalarResult('note','note');
        $rsm->addScalarResult('duree','duree');
        $rsm->addScalarResult('typeItem','typeItem');
        $rsm->addScalarResult('nbVues','nbVues');
        $rsm->addScalarResult('date','date');

        $rsm->addScalarResult('idArtiste','idArtiste');

        $this->_em->flush();
        $this->_em->clear();

        $query = $this->_em->createNativeQuery('SELECT i.*, idArtiste FROM item i,itemartiste ia
        WHERE i.id = ia.idItem 
        AND ia.idArtiste = ? ORDER BY RAND() LIMIT 1', $rsm);
        $query->setParameter(1, $idArtiste);

        $item = $query->getResult();
        return $item;
    }
}
