<?php

namespace ByExample\DemoBundle\Repository;

use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;

/**
 * ItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemRepository extends EntityRepository
{
	public function findItemsBySearchKey($key)
	{
        $key = "%".$key."%";

		$query = $this->_em->createQuery('SELECT partial i.{id,url,titre,note,duree,typeitem,nbvues,date,urlCover,urlPoster}, partial a.{id,nom}
                                            FROM ByExampleDemoBundle:Item i LEFT JOIN i.idartiste a
                                            WHERE i.titre LIKE :key')
        ->setParameter('key', $key);
        $items = $query->getResult(Query::HYDRATE_ARRAY);
        return $items;
	}

    public function findItemsByPopularity($days, $limit)
    {

        $query = $this->_em->createQuery(
        'SELECT COUNT(i.id) as views, i.id, i.titre, i.note, i.url, a.id as idArtiste, a.nom
        FROM ByExampleDemoBundle:Item i LEFT JOIN i.idartiste a, ByExampleDemoBundle:Ecoute e
        WHERE e.iditem = i.id
        AND (e.date > :before)
				AND i.typeitem = 1
        GROUP BY i.id
        ORDER BY views DESC')
        ->setParameter('before', new \DateTime('-'.$days.' days'))
        ->setMaxResults($limit);
        $items = $query->getResult();
        return $items;
    }

    public function findTagsByItem($idItem)
    {

        $query = $this->_em->createQuery(
        'SELECT t.id, t.libelle, nt.note
        FROM ByExampleDemoBundle:Tag t, ByExampleDemoBundle:NoteTagItem nt
        WHERE t.id = nt.idtag
        AND nt.iditem= :idItem')
        ->setParameter('idItem', $idItem);
        $items = $query->getResult();
        return $items;
    }

    public function findRandomItemByGenre($idGenre)
    {

        $rsm = new ResultSetMapping($em);
        $rsm->addEntityResult('ByExampleDemoBundle:Item','i');
        $rsm->addEntityResult('ByExampleDemoBundle:Artiste','y');
        $rsm->addScalarResult('nom','nom');
        $rsm->addScalarResult('id','id');
        $rsm->addScalarResult('url','url');
        $rsm->addScalarResult('titre','titre');
        $rsm->addScalarResult('note','note');
        $rsm->addScalarResult('duree','duree');
        $rsm->addScalarResult('typeItem','typeItem');
        $rsm->addScalarResult('nbVues','nbVues');
        $rsm->addScalarResult('urlCover','urlCover');
        $rsm->addScalarResult('urlPoster','urlPoster');

        $rsm->addScalarResult('date','date');

        $rsm->addScalarResult('idArtiste','idArtiste');

        $this->_em->flush();
        $this->_em->clear();

        $query = $this->_em->createNativeQuery('SELECT i.*, idArtiste, y.nom FROM item i, itemgenre ig, artiste y,itemartiste ia
        WHERE i.id = ig.idItem AND i.id = ia.idItem
        AND y.id = ia.idArtiste
				AND i.typeitem = 1
        AND ig.idGenre = ? ORDER BY RAND() LIMIT 1', $rsm);
        $query->setParameter(1, $idGenre);

        $item = $query->getResult();
        return $item;
    }

    public function findRandomItemByArtiste($idArtiste)
    {

        $rsm = new ResultSetMapping($em);
        $rsm->addEntityResult('ByExampleDemoBundle:Item','i');
        $rsm->addEntityResult('ByExampleDemoBundle:Artiste','y');
        $rsm->addScalarResult('nom','nom');
        $rsm->addScalarResult('id','id');
        $rsm->addScalarResult('url','url');
        $rsm->addScalarResult('titre','titre');
        $rsm->addScalarResult('note','note');
        $rsm->addScalarResult('duree','duree');
        $rsm->addScalarResult('typeItem','typeItem');
        $rsm->addScalarResult('nbVues','nbVues');
        $rsm->addScalarResult('date','date');

        $rsm->addScalarResult('idArtiste','idArtiste');

        $this->_em->flush();
        $this->_em->clear();

        $query = $this->_em->createNativeQuery('SELECT i.*, idArtiste, y.nom FROM item i,artiste y,itemartiste ia
        WHERE i.id = ia.idItem
        AND y.id = ia.idArtiste
        AND ia.idArtiste = ? ORDER BY RAND() LIMIT 1', $rsm);
        $query->setParameter(1, $idArtiste);

        $item = $query->getResult();
        return $item;
    }

    public function findItemByAction($id, $id_action){

        $rsm = new ResultSetMapping($em);
        $rsm->addEntityResult('ByExampleDemoBundle:Item','i');
        $rsm->addEntityResult('ByExampleDemoBundle:Actions','a');
        $rsm->addEntityResult('ByExampleDemoBundle:Artiste','b');
        $rsm->addScalarResult('nom','nom');
        $rsm->addScalarResult('idUtilisateur','idUtilisateur');
        $rsm->addScalarResult('idArtiste','idArtiste');
        $rsm->addScalarResult('id','id');
        $rsm->addScalarResult('url','url');
        $rsm->addScalarResult('titre','titre');
        $rsm->addScalarResult('note','note');
        $rsm->addScalarResult('duree','duree');
        $rsm->addScalarResult('typeItem','typeItem');
        $rsm->addScalarResult('nbVues','nbVues');
        $rsm->addScalarResult('date','date');
        $this->_em->flush();
        $this->_em->clear();
        $query = $this->_em->createNativeQuery('SELECT i.*, z.idArtiste, a.idUtilisateur, b.nom FROM item i,actions a, artiste b, itemartiste z
        WHERE a.idTypeAction = ?
        AND z.idItem = i.id AND b.id = z.idArtiste
        AND i.id = a.idItem AND a.idUtilisateur = ?', $rsm);
        $query->setParameter(1, $id_action);
        $query->setParameter(2, $id);
        $items = $query->getResult();
        return $items;
    }

    public function findItemByAlbum($idalbum){
         //$query = $this->_em->createQuery('SELECT partial i.{id,url,titre,note,duree,typeitem,nbvues,date,urlCover,urlPoster} FROM ByExampleDemoBundle:Item i JOIN i.idalbum a WHERE a = :idalbum')->setParameter('idalbum', $idalbum);
				$query = $this->_em->createQuery('SELECT i, partial r.{id, nom} FROM ByExampleDemoBundle:Item i JOIN i.idalbum a JOIN i.idartiste r WHERE a = :idalbum')->setParameter('idalbum', $idalbum);


				$items = $query->getResult(Query::HYDRATE_ARRAY);
        return $items;
    }

    public function findAlbumByArtist($idArtiste){
        $query = $this->_em->createQuery('SELECT DISTINCT i FROM ByExampleDemoBundle:Item i, ByExampleDemoBundle:Item z JOIN z.idalbum b JOIN b.idartiste j WHERE b = i.id AND j.id = :idartiste')->setParameter('idartiste', $idArtiste);
        $albums =  $query->getResult(Query::HYDRATE_ARRAY);
        return $albums;
    }


		public function findAllGenre(){
			$tableau = array();
			for($i = 20; $i<57;$i++){

				$query=$this->_em->createQuery('SELECT partial i.{id,titre}, partial a.{id,nom}
		                                            FROM ByExampleDemoBundle:Item i LEFT JOIN i.idartiste a
		                                            WHERE i.id = :id AND i.typeitem = 1')->setParameter('id',$i);
				$item=$query->getResult(Query::HYDRATE_ARRAY);
				if($item){
					$tableau[$i]=$item;
				}
			}
			return $tableau;
		}


		public function findItemByArtist($idArtiste){
			$query = $this->_em->createQuery("SELECT i FROM ByExampleDemoBundle:Item i JOIN i.idartiste a WHERE i.typeitem=1 AND a=:idartiste")->setParameter("idartiste", $idArtiste);
			$items=$query->getResult(Query::HYDRATE_ARRAY);
			return $items;
		}







}
